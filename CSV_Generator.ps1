<#
-----------------------------------------------------------------------
Name: Oregon Death Record CSV Generator
Author: Anthony Dunaway
Date: 05/21/2018
Updated: 06/08/2018
Description:
Cleans up text files generated by the ODI record extractor script and puts them into a csv format. 
Fixes common errors made by Tesseract software. 
-----------------------------------------------------------------------
#>

$location = Get-Location
."$location\User_Input.ps1"

Write-Host "CSV Generator"
$run_middle = Get-UserInput -Question 'Do you want to process middle names?        '
$run_first = Get-UserInput -Question 'Do you want to process first names?         '
$file_path = "$location\master_files\"
$last = "master_last.txt"
$first = "master_first.txt"
$middle = "master_middle.txt"
$date = "master_date.txt"
$master_file = "$location\ODIRecords.txt"

#------------------------------------------------------------------------------------------------------------------------
# Remove record count lines from files
#------------------------------------------------------------------------------------------------------------------------	
Write-Host "Performing final cleanup of master files"
if(($run_first -eq 1) -and ($run_middle -eq 1)){
	$files = ("$file_path$last", "$file_path$first", "$file_path$middle", "$file_path$date")	
}
elseif(($run_first -eq 1) -and ($run_middle -eq 0)){
	$files = ("$file_path$last", "$file_path$first", "$file_path$date")
}
elseif(($run_first -eq 0) -and ($run_middle -eq 1)){
	$files = ("$file_path$last", "$file_path$middle", "$file_path$date")
}
else{
	$files = ("$file_path$last", "$file_path$date")
}

foreach($txt in $files){
	$corrections = "$location\master_cleaner.csv"
	$file_to_correct = $txt
	$ReplacementList = Import-Csv $corrections
	Get-ChildItem $file_to_correct | Out-Null
	$Content = Get-Content $file_to_correct
	foreach ($ReplacementItem in $ReplacementList){
		$Content = $Content.Replace($ReplacementItem.OldValue, $ReplacementItem.NewValue)
	}
	Set-Content $file_to_correct -Value $Content
	(gc $txt) | ? {$_.trim() -ne "" } | set-content $txt
}

#put this in the for loop to limit the number of iterations for testing
#$debug_counter = 0; $debug_counter -le 10; $debug_counter ++

#------------------------------------------------------------------------------------------------------------------------
# Read the master files line by line and append them to the master CSV
#------------------------------------------------------------------------------------------------------------------------
Write-Host "Creating CSV"
$last_reader = [System.IO.File]::OpenText("$file_path$last")
if($run_first -eq 1){
	$first_reader = [System.IO.File]::OpenText("$file_path$first")
}
if($run_middle -eq 1){
	$middle_reader = [System.IO.File]::OpenText("$file_path$middle")
}
$date_reader = [System.IO.File]::OpenText("$file_path$date")
	
for() {
	$csv_string = ""
	$county = ""
	$last_line = $last_reader.ReadLine()
	if($run_first -eq 1){
		$first_line = $first_reader.ReadLine()
	}
	if($run_middle -eq 1){
		$middle_line = $middle_reader.ReadLine()
	}
	$date_line = $date_reader.ReadLine()
	if ($date_line -eq $null) { 
		break 
	}
	
	#change 1300 to 1900
	if($date_line[7] -eq "3"){
		[char[]]$char = $date_line
		$char[7] = "9"
		$joined = -join $char
		$date_line = $joined
	}

	#Remove whitespace from last names
	if(-Not [string]::IsNullOrEmpty($last_line)){
		$last_name = $last_line.Replace(" ","")
		$last_name = $last_line.Replace("2","Z")
		$last_name = $last_line.Replace("0","O")
		if($first_name -eq "o1To"){
			$first_name = "OTTO"
		}
	}
	if($run_first -eq 1){
		$first_name = $first_line
		if(-Not [string]::IsNullOrEmpty($first_name)){
			$first_name = $first_name.Replace("1","I")
			$first_name = $first_name.Replace("2","Z")
			$first_name = $first_name.Replace("0","O")
		}
	}
	else{
		$first_name = ""
	}
	
	if($run_middle -eq 1){
		$middle_name = $middle_line
		if($middle_name -eq ")"){
			$middle_name = "O"
		}
	}
	else{
		$middle_name = ""
	}
	$date_county = $date_line.Split(" ")
	
	#Replace some common Tesseract errors
	$date_val = $date_county[0].Replace("S","5")
	$date_val = $date_county[0].Replace("$","5")
	
	#Clean up county field 
	$county_count = $date_county.Count
	for($i = 1; $i -lt $county_count; $i++){
		if(-Not [string]::IsNullOrEmpty($date_county[$i])){
			$date_county[$i] = $date_county[$i].Replace("0","O")
		}
		$county += $date_county[$i] + " "
	}

	$csv_string = "$last_name,$first_name,$middle_name,$date_val,$county"
	Add-Content $master_file $csv_string.ToUpper()
	#$debug_counter ++	
}
$last_reader.Close()
if($run_first -eq 1){
	$first_reader.Close()
}
if($run_middle -eq 1){
	$middle_reader.Close()
}
$date_reader.Close()
Read-Host -prompt "press enter"